<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>My-Work-Log</title>
    <link href="/2023/03/20/My-Work-Log/"/>
    <url>/2023/03/20/My-Work-Log/</url>
    
    <content type="html"><![CDATA[<h1 id="My-Work-Log"><a href="#My-Work-Log" class="headerlink" title="My-Work-Log"></a>My-Work-Log</h1><p><strong>My work log in the reverse way</strong></p><p>&#x2F;** 2023&#x2F;4&#x2F;6&#x2F;</p><ol><li>v-deep(&lt;vue3) :deep(vue3)<ul><li>so to handle the selectd  child component in the component library ,can use the v-deep or :deep in style</li></ul></li><li>change img src in the array when bundle the project</li></ol><ul><li>use import the img in the array<br><code>import cloudImg from &quot;@/assets/images/screen/cloud.png&quot;;</code></li></ul><ol start="3"><li>the braket’s effect(role) is valid(diverse)</li></ol><ul><li>await the data you can use the braket() to include it and get the key directly</li></ul><p>&#x2F;** 2023&#x2F;4&#x2F;6&#x2F;</p><ol><li>opacity and rgba<ul><li>opacity:0.3 equal to rgba(255,255,255,0.3)</li></ul></li></ol><p>&#x2F;** 2023&#x2F;4&#x2F;3&#x2F;</p><ol><li>how to set line solid bot<ul><li>set symbolSize and symbol:”circle”</li></ul></li><li>I recommend to use set dataset to a array,<ul><li>because in the array type,you can change the layout to the column or row;</li></ul></li></ol><p>&#x2F;** 2023&#x2F;3&#x2F;30&#x2F;</p><ol><li><p>how to let different bar overlap together in echarts</p><ul><li>maybe zLevel or stack </li><li>stack is better! maybe!</li></ul></li><li><p>can use label.formatter(callback()) to change label.style</p><ul><li>in the formatter callback() function, can get the option’s data and can get the index of the data by params.dataIndex.</li></ul></li><li><p>how to let the text an the center of bar</p><ul><li>set: position: “inside”,</li></ul></li><li><p>how to let the  show all label in the xAxis</p><ul><li>axisLabel: {   interval: 0,}</li></ul></li><li><p>in the bar chart if you want to put a line</p><ul><li>you can set</li></ul></li></ol><p>&#x2F;** 2023&#x2F;3&#x2F;29&#x2F;</p><ol><li>Promise {<pending>} instead of a value?<ul><li>because promise need to resolve, so must call <code>.then</code>to capture the resuslts.</li></ul></li><li>to much items on the xAxis of echarts,and it doesn’t show all,so th solution</li></ol><p>&#x2F;** 2023&#x2F;3&#x2F;28&#x2F;</p><ol><li><p>echarts and button conflict</p><ul><li>use z-index to set different display weight（the conflict was caused because I set the chart-box a high display weight  than the button’s and  forgot to adjust it ）</li></ul></li><li><p>vue3 composition API props and emits</p><ul><li>must to use defineProps and defineEmits to declare props and emits</li></ul></li><li><p>what is low code platform of backend in the China Mobile?？</p></li><li><p>Response Layout：what should I use in rem、flex、vw、grid</p><ul><li><p>rem:  be determined by font-size and @media</p></li><li><p>flex: can use <strong>calc</strong> to determine the width, and use <strong>aspect-radio</strong> to change the height.&#96;&#96;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.grid-container</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-wrap</span>: wrap;<br>&#125;<br><br><span class="hljs-selector-class">.grid-item</span> &#123;<br>  <span class="hljs-attribute">flex-basis</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">10px</span>);<br>  aspect-ratio: <span class="hljs-number">821</span>/<span class="hljs-number">351</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><p>&#x2F;** 2023&#x2F;3&#x2F;27&#x2F;</p><ol><li>why rem can’t run <ul><li>because i need to change the font-size at the root element</li></ul></li><li>menu hover<ul><li>use v-on  and bind the mouse event: mouseover and mouseout</li></ul></li></ol><p>&#x2F;** 2023&#x2F;3&#x2F;24*&#x2F;</p><ol><li>ECharts.API<ul><li>title: can set the title’s style position,</li><li>legend: 不同系列的标记，颜色和名字，也可以控制style position</li></ul></li><li>echarts error<ul><li>resize error: because vue’s dom is proxy,so it has conflict<ul><li><a href="https://blog.csdn.net/B_rabbit_d/article/details/119275715">Reference1</a></li><li><a href="https://github.com/apache/echarts/issues/13943">Reference2</a></li></ul></li></ul></li></ol><p>&#x2F;** 2023&#x2F;3&#x2F;23*&#x2F;</p><ol><li><p><a href="https://github.com/showlab/Tune-A-Video/blob/main/tuneavideo/pipelines/pipeline_tuneavideo.py">Tune-A-Video</a>: a funny py model that transform the  text into video.</p></li><li><p>v-for and v-if three solution??</p><ul><li>template</li><li>v-for filter</li><li>computed</li></ul></li><li><p>in the work of separation of fornt and back-end,how to make a good page struture is a bit of annoyance, so i decide to read a  book<a href="https://refactoringguru.cn/design-patterns/catalog">设计模式</a>，but it doesn’t seem relevant.so I need to learn more about it;</p></li></ol><p>&#x2F;** 2023&#x2F;3&#x2F;20*&#x2F;</p><ol><li>if you want to set the bg-image as big as browser,you can set<code>height:100vh</code></li><li>flex is powerful,don’t waste it </li><li>Html页面绘制先确定整体定位（用vw，vh，rem），在确定细分部分的大小（px，rem）</li></ol>]]></content>
    
    
    <categories>
      
      <category>Daily</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Daily</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My-Daily-Log</title>
    <link href="/2023/03/14/My-Daily-Log/"/>
    <url>/2023/03/14/My-Daily-Log/</url>
    
    <content type="html"><![CDATA[<h1 id="My-Daily-Log"><a href="#My-Daily-Log" class="headerlink" title="My-Daily-Log"></a>My-Daily-Log</h1><p><strong>my daily log in the reverse way</strong></p><p>&#x2F;** 2023&#x2F;3&#x2F;19*&#x2F;</p><p>today, i talk to my mum about the bad thing that my dad almost fell down when he climbed a moutain, i am really worry about his health,i need to tell he need to do exercise gradually.There is an old saying in Chind:”Try you best,and that is the life”.sometimes it is hard to deal with life and family.and everything need time to do.I was regret to waste my time in the university.maybe to do hard previously can change my situation now.but the water is running,I need to focus on persent and do my best.</p><p>&#x2F;** 2023&#x2F;3&#x2F;15*&#x2F;</p><p>广西平陆运河(已经开工了，但得看下国家的政策和广东的产业转移，以及世界的形势)<br>环广西与自行车产业</p><p>&#x2F;*<em>2023&#x2F;3&#x2F;14</em>&#x2F;</p><p>when the win key is’t work,check if the win key is on,use fn+win key to solve it in the asus computer</p><p>&#x2F;*<em>这是注释</em>&#x2F;</p><!-- flag of hidden posts -->]]></content>
    
    
    <categories>
      
      <category>Daily</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Daily</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python-Basis</title>
    <link href="/2023/03/10/Python-Basis/"/>
    <url>/2023/03/10/Python-Basis/</url>
    
    <content type="html"><![CDATA[<h1 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h1><p>python的语法采用缩进方式，<code>input()</code>函数获取用户输入</p><h2 id="1-1-数据类型和变量"><a href="#1-1-数据类型和变量" class="headerlink" title="1.1.数据类型和变量"></a>1.1.数据类型和变量</h2><p>在python中变量是弱类型的，数据类型包括：整数、浮点数、字符串、布尔值、空值等……</p><ul><li><p>字符串(与JavaScript一样，使用<code>&quot;&quot;</code>或<code>&#39;&#39;</code>定义)</p><ul><li><p>转义字符：<code>\</code> ， 可以时字符串内部既包含<code>&#39;</code>或<code>&quot;</code></p><ul><li>字符<code>\</code>本身也要转义，所以<code>\\</code>表示的字符就是<code>\</code></li></ul></li><li><p><code>\n</code>表示换行</p></li><li><p><code>\t</code>表示制表符（tab）</p></li><li><p>不转义：<code>r&#39;&#39;</code></p></li><li><p>多行内容：<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>:&#96;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;&#x27;line1</span><br><span class="hljs-string"><span class="hljs-meta">... </span>line2</span><br><span class="hljs-string"><span class="hljs-meta">... </span>line3&#x27;&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>空值：None（JavaScript：Null）</p></li></ul><h2 id="1-2-字符串和编码"><a href="#1-2-字符串和编码" class="headerlink" title="1.2.字符串和编码"></a>1.2.字符串和编码</h2><p>ASCii&lt;UTF-8&lt;Unicode：字节的区别，</p><p>ASCII编码是1个字节，而Unicode编码通常是2个字节。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节</p><ul><li><code>ord()</code>函数获取字符的整数表示</li><li><code>chr()</code>函数把编码转换为对应的字符：</li><li>对<code>bytes</code>类型的数据用带<code>b</code>前缀的单引号或双引号表示：<code>x = b&#39;ABC&#39;</code></li><li>以Unicode表示的<code>str</code>通过<code>encode()</code>方法可以编码为指定的<code>bytes</code><br>‘字符串’.encode(‘编码类型’)</li><li><code>decode()</code>：bytes<code>变为</code>str，例：<code>b&#39;ABC&#39;.decode(&#39;ascii&#39;)</code></li><li><code>len()</code>：获取字符串的长度或字节数</li></ul><table><thead><tr><th align="left">字符</th><th align="left">ASCII</th><th align="left">Unicode</th><th align="left">UTF-8</th></tr></thead><tbody><tr><td align="left">A</td><td align="left">01000001</td><td align="left">00000000 01000001</td><td align="left">01000001</td></tr><tr><td align="left">中</td><td align="left">x</td><td align="left">01001110 00101101</td><td align="left">11100100 10111000 10101101</td></tr></tbody></table><p><img src="https://www.liaoxuefeng.com/files/attachments/923923787018816/0" alt="rw-file-utf-8"></p><p><img src="https://www.liaoxuefeng.com/files/attachments/923923759189600/0" alt="web-utf-8"></p><h2 id="1-3-格式化"><a href="#1-3-格式化" class="headerlink" title="1.3.格式化"></a>1.3.格式化</h2><p>和c语言一致，采用<code>%</code>实现，格式<code>&#39;Hello, %s&#39; % &#39;相应变量&#39;</code></p><table><thead><tr><th align="left">占位符</th><th align="left">替换内容</th></tr></thead><tbody><tr><td align="left">%d</td><td align="left">整数</td></tr><tr><td align="left">%f</td><td align="left">浮点数</td></tr><tr><td align="left">%s</td><td align="left">字符串，同时可以其他类型转换<br />为字符串</td></tr><tr><td align="left">%x</td><td align="left">十六进制整数</td></tr></tbody></table><p><code>format()</code>：用传入的参数依次替换字符串内的占位符<code>&#123;0&#125;</code>、<code>&#123;1&#125;</code>……，以此来格式化字符串<code>&#39;Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%&#39;.format(&#39;小明&#39;, 17.125)</code></p><p><code>f-string</code>：使用以<code>f</code>开头的字符串，如果字符串包含{}，就会以对应的便令替换</p><h2 id="1-4-list和tuple"><a href="#1-4-list和tuple" class="headerlink" title="1.4.list和tuple"></a>1.4.list和tuple</h2><p><code>list</code>类似数组，使用<code>[]</code>定义，使用<code>len()</code>获取其长度，可以正数获取相应位置的元素，也可以倒数获取元素</p><ul><li><p><code>append()</code>：追加元素到末尾（JavaScript：push）</p></li><li><p><code>insert()</code>:在指定位置插入元素</p></li><li><p><code>pop()</code>：删除最后一个元素，也可以删除指定位置的元素</p></li><li><p>切片操作符<code>:</code>，和JS slice()方法类似，同样适用于tuple和字符串</p><ul><li>使用方式：<code>l[first location: last location]</code><br>首位置默认为0，可以不填，尾位置不被切片<br>也可以倒数切片，倒数第一个元素默认为-1，切片规则与正数一致</li></ul></li><li><p>列表生成式：用来创建list的生成式</p><ul><li>l&#x3D;list() :<code>l=list(range(1,11))</code></li><li>l&#x3D;[]<ul><li>单循环：<code>[x*x for x in range(1,11)]</code></li><li>双循环: <code>[m+n for m in &#39;abc&#39; for n in &#39;xyz&#39;]</code></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">//<span class="hljs-keyword">if</span> <span class="hljs-keyword">else</span> 和 列表生成式<br>// <span class="hljs-keyword">if</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">in</span> front of  <span class="hljs-built_in">list</span> comprehensions,the <span class="hljs-keyword">if</span> judge the <span class="hljs-keyword">return</span> x<br>[x <span class="hljs-keyword">if</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> -x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>)]<br>[-<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, -<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, -<span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br>//<span class="hljs-keyword">if</span> <span class="hljs-keyword">else</span> behind of <span class="hljs-built_in">list</span> comprehensions,the <span class="hljs-keyword">if</span> judge the <span class="hljs-built_in">list</span> comprehensions<br>[x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>) <span class="hljs-keyword">if</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>]<br>[<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>]<br></code></pre></td></tr></table></figure></li></ul><p><code>tuple</code>：元组，tuple一旦初始化就不能修改（即指向不变），采用()定义</p><p>但定义只有一个元素的tuple时，采用(data,)的方式一区别数学中的括号</p><h2 id="1-5-if条件判断"><a href="#1-5-if条件判断" class="headerlink" title="1.5.if条件判断"></a>1.5.if条件判断</h2><p><code>if</code>条件判断无需加括号，<code>elif</code>表示else if，是else if的缩写，<code>else:</code>要加冒号，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-number">3</span><br><span class="hljs-keyword">if</span> age &gt;= <span class="hljs-number">18</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;your age is&#x27;</span>, age)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;adult&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;your age is&#x27;</span>, age)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;teenager&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>int()</code>函数，可以把<code>input()</code>返回的stri数据类型转换为整数</p><h2 id="1-6-循环和迭代"><a href="#1-6-循环和迭代" class="headerlink" title="1.6.循环和迭代"></a>1.6.循环和迭代</h2><p>Python有两种循环：</p><ol><li>for  in 循环  <ul><li>与Javascript中的for in 循环类似</li></ul></li><li>while 循环</li></ol><p><strong>迭代：</strong></p><p>python迭代通过for in来完成 </p><p>dict: for x in d || for x in d.values || for k,v in d.items</p><p>判断是否为可迭代对象Iterable</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterable<br><span class="hljs-built_in">isinstance</span>( , Iterable)<br></code></pre></td></tr></table></figure><p>list:实现下标循环使用<code> enumerate()</code><br><code>for i, value in enumerate([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]):</code></p><p><u>迭代器</u>：可以被next()函数调用并不断返回下一个值的对象称为：Iterator</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterator<br><span class="hljs-built_in">isinstance</span>((x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)), Iterator)<br></code></pre></td></tr></table></figure><h2 id="1-7-dict和set"><a href="#1-7-dict和set" class="headerlink" title="1.7.dict和set"></a>1.7.dict和set</h2><p>dict：字典，与Javascript对象或Map类似，使用键-值（key-value）存储</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">//<span class="hljs-built_in">dict</span><br>d = &#123;<span class="hljs-string">&#x27;Michael&#x27;</span>: <span class="hljs-number">95</span>, <span class="hljs-string">&#x27;Bob&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;Tracy&#x27;</span>: <span class="hljs-number">85</span>&#125;<br></code></pre></td></tr></table></figure><ul><li>in 判断key是否存在</li><li>get()：key不存在，返回None</li><li>pop(key)：删除指定key</li></ul><p>set：一组key的集合，但不存储value，且key不能重复</p><p>创建set，需要提供一个list作为输入集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-built_in">set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>//两个<span class="hljs-built_in">set</span>可以做数学意义上的交集、并集等操作：<br>s1 = <span class="hljs-built_in">set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>s2 = <span class="hljs-built_in">set</span>([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br>s1 &amp; s2<br></code></pre></td></tr></table></figure><ul><li>add(key)</li><li>remove(key)</li></ul><h2 id="1-8-函数"><a href="#1-8-函数" class="headerlink" title="1.8.函数"></a>1.8.函数</h2><p>声明方式：def 函数名(参数) ：</p><p>占位符： pass，用于空函数</p><p>python函数可以返回多个值，无需以花括号的形式<code>return x,y</code></p><p>python函数参数：</p><ol><li><p>位置参数：即(x)</p></li><li><p>默认参数：(x&#x3D;2)</p><ul><li>默认参数需指向不变对象</li></ul></li><li><p>可变参数：(*nubmers)</p><ul><li>lis和tuple传入可变参数，需要在其前面加*（类似js解构赋值）</li></ul></li><li><p>关键字参数：**，允许传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict</p><ul><li>同时也可以把dict传入关键字参数，函数内获得对dict的一份深拷贝<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">extra = &#123;<span class="hljs-string">&#x27;city&#x27;</span>: <span class="hljs-string">&#x27;Beijing&#x27;</span>, <span class="hljs-string">&#x27;job&#x27;</span>: <span class="hljs-string">&#x27;Engineer&#x27;</span>&#125;<br>person(<span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-number">24</span>, **extra)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>命名关键字参数 （*， ），必须传入参数名，也可以设置默认值（此时调用函数时，可不传入已有默认值的参数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">person</span>(<span class="hljs-params">name, age, *, city, job</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">person</span>(<span class="hljs-params">name, age, *args, city, job</span>):<br></code></pre></td></tr></table></figure></li></ol><p><strong>递归函数：</strong></p><p>栈帧</p><p>尾递归：尾递归是指，在函数返回的时候，调用自身本身，并且，return语句不能包含表达式</p><h2 id="1-9-generator"><a href="#1-9-generator" class="headerlink" title="1.9.generator"></a>1.9.generator</h2><p>生成方法：</p><ol><li><p>（）：<code>g = (x * x for x in range(10))</code></p></li><li><p>yield</p></li></ol><p>调用方法：</p><ol><li>next()</li><li>for循环</li></ol><p>要获取generator函数返回值，必须捕获<code>StopIteration</code>错误，返回值包含在<code>StopIteration</code>的<code>value</code>中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">g = fib(<span class="hljs-number">6</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>     <span class="hljs-keyword">try</span>:<br>         x = <span class="hljs-built_in">next</span>(g)<br>         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;g:&#x27;</span>, x)<br>     <span class="hljs-keyword">except</span> StopIteration <span class="hljs-keyword">as</span> e:<br>         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Generator return value:&#x27;</span>, e.value)<br>         <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python-Note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My Hexo Blog Building Process</title>
    <link href="/2023/03/10/my-first-build-remark/"/>
    <url>/2023/03/10/my-first-build-remark/</url>
    
    <content type="html"><![CDATA[<img src="/2023/03/10/my-first-build-remark/739175c1cf079121eb57a66ddbf7048e.jpg" class="" title="This is an example image"><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p>Hexo:<a href="https://xie.infoq.cn/article/ac51ce1f6e9434779c35cbb6c">参考网址</a> <a href="https://hexo.io/zh-cn/">Hexo网址</a> <a href="https://mrseawave.github.io/blogs/articles/2021/01/05/writing-hexo/">Hexo生成新的文章</a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: [Deployment](</p>]]></content>
    
    
    <categories>
      
      <category>First-Build</category>
      
    </categories>
    
    
    <tags>
      
      <tag>First-Build</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
